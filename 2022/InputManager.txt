using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using Photon.Pun;

    //OAEvent is an Unity Event that returns one argument
[System.Serializable]
public class OAEvent : UnityEvent<float>
{

}
[SerializeField]    
public class KeyEvent : UnityEvent<bool>
{

}

public class InputManager : MonoBehaviour
{

    //This is how the input manager works
    //All the inputs will be set in update and 
    //Will evoke unity events that can be set in each scene
    //For each mini-game for example
    public PhotonView photonView;
    public int isOn = 0;
    public OAEvent horizontalAxis,verticalAxis,horizontal2Axis,vertical2Axis;
    public OAEvent fly,  rollRight, rollLeft, fireAxis;


    void Update()
    {
        if(!photonView.IsMine)
            return;
        if(isOn == 0)
            return;

        
        Debug.Log(Input.GetAxis("Horizontal"));
        //Can be responsible for jumping or doing single time actions e.g

        //In the other hand the horizontal axis will invoke with its own value
        //Can be responsible for moving horizontally or handling rotatins on the X axis e.g

        if(Input.GetAxis("Horizontal") !=0 && horizontalAxis != null)
        {
            horizontalAxis.Invoke(Input.GetAxisRaw("Horizontal"));
            Debug.Log("Horizontal axis = "+ Input.GetAxisRaw("Horizontal"));
        }

        //Can be responsible for moving vertically or handling rotations on the Z axis e.g
        if(Input.GetAxis("Vertical") !=0 && verticalAxis != null)
        {
            verticalAxis.Invoke(Input.GetAxisRaw("Vertical"));
            //Debug.Log("Vertical axis = "+ Input.GetAxisRaw("Vertical"));
        }

        //Can be responsible for looking horizontally or handling rotatins on the X axis e.g
        if(Input.GetAxis("Horizontal2") !=0 && horizontal2Axis != null)
        {
            horizontal2Axis.Invoke(Input.GetAxis("Horizontal2"));
            //Debug.Log("Horizontal2 axis = "+ Input.GetAxis("Horizontal2"));
        }

        //Can be responsible for looking vertically or handling rotations on the Z axis e.g
        if(Input.GetAxis("Vertical2") !=0 && vertical2Axis != null)
        {
            vertical2Axis.Invoke(Input.GetAxis("Vertical2"));
            //Debug.Log("Vertical2 axis = "+ Input.GetAxis("Vertical2"));
        }

        if (Input.GetAxis("Fly") != 0 && fly != null)
        {
            fly.Invoke(Input.GetAxis("Fly"));
            //Debug.Log("Fly");
        }

        if (Input.GetAxis("RollRight") != 0 && fly != null)
        {
            rollRight.Invoke(Input.GetAxis("RollRight"));
        }

        if (Input.GetAxis("RollLeft") != 0 && fly != null)
        {
            rollLeft.Invoke(Input.GetAxis("RollLeft"));
        }
        //Can be responsible for looking vertically or handling rotations on the Z axis e.g
        if(Input.GetAxis("Fire1") !=0 && fireAxis != null)
        {
            fireAxis.Invoke(Input.GetAxis("Fire1"));
            //Debug.Log("Vertical2 axis = "+ Input.GetAxis("Vertical2"));
        }
    }
}
